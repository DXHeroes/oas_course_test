{
	"info": {
		"_postman_id": "a255f47b-5042-4623-be57-44af7957d818",
		"name": "Coffee Shop API - tested",
		"description": "API for managing orders and menu in a coffee shop.\n\nContact Support:\n Name: CoffeShop API Support\n Email: support@coffeshop.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18213143"
	},
	"item": [
		{
			"name": "orders",
			"item": [
				{
					"name": "{orderId}",
					"item": [
						{
							"name": "Delete Order",
							"item": [
								{
									"name": "200",
									"item": [
										{
											"name": "Delete an order by its ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Extract response data",
															"let responseCode = pm.response.code;",
															"",
															"// Test 1: Verify response status is 200",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset('orderId')",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"// Define the order payload",
															"let orderPayload = {",
															"    \"customer_name\": \"John Doe\",",
															"    \"items\": [",
															"        {",
															"            \"menu_item_id\": 1,",
															"            \"quantity\": 2",
															"        }",
															"    ],",
															"    \"total_price\": 7.00",
															"};",
															"",
															"// Make a request to create an order",
															"pm.sendRequest({",
															"    url: pm.collectionVariables.get(\"baseUrl\") + \"/orders\",",
															"    method: \"POST\",",
															"    header: {",
															"        \"Content-Type\": \"application/json\",",
															"        \"Accept\": \"application/json\",",
															"        \"Authorization\": \"Basic \" + require('btoa')(pm.collectionVariables.get(\"basicAuthUsername\") + \":\" + pm.collectionVariables.get(\"basicAuthPassword\")) // Use Basic Auth",
															"    },",
															"    body: {",
															"        mode: \"raw\",",
															"        raw: JSON.stringify(orderPayload)",
															"    }",
															"}, function (err, response) {",
															"    if (err) {",
															"        console.log(\"Error creating order:\", err);",
															"    } else {",
															"        let jsonData = response.json();",
															"        if (response.code === 201 && jsonData) {",
															"            console.log(\"Order created successfully with ID:\", jsonData);",
															"            pm.environment.set(\"orderId\", jsonData);",
															"            console.log(\"Using orderId:\", pm.environment.get(\"orderId\"));",
															"",
															"        } else {",
															"            console.log(\"Failed to create order. Response:\", response);",
															"        }",
															"    }",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "{{orderId}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Removes an order from the coffee shop system using the provided orderId."
											},
											"response": []
										}
									]
								},
								{
									"name": "404",
									"item": [
										{
											"name": "Order not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 404\", function () {",
															"  pm.expect(pm.response.code).to.equal(404);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields - code and message\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.code).to.exist;",
															"  pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Message is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.code).to.exist;",
															"    pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Content-Type is application/json\", function () {",
															"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "27029",
															"description": "(Required) "
														}
													]
												},
												"description": "Removes an order from the coffee shop system using the provided orderId."
											},
											"response": []
										}
									]
								},
								{
									"name": "401",
									"item": [
										{
											"name": "Missing credentials",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Extract response data",
															"let responseCode = pm.response.code;",
															"",
															"// Test 1: Verify response status is 200",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields - code and message\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.code).to.exist;",
															"  pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Message is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.code).to.exist;",
															"    pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Content-Type is application/json\", function () {",
															"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "{{orderId}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Removes an order from the coffee shop system using the provided orderId."
											},
											"response": []
										},
										{
											"name": "Incorrect credentials",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Extract response data",
															"let responseCode = pm.response.code;",
															"",
															"// Test 1: Verify response status is 200",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields - code and message\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.code).to.exist;",
															"  pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Message is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.code).to.exist;",
															"    pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Content-Type is application/json\", function () {",
															"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "nope",
															"type": "string"
														},
														{
															"key": "username",
															"value": "nope",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "{{orderId}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Removes an order from the coffee shop system using the provided orderId."
											},
											"response": []
										}
									]
								},
								{
									"name": "400",
									"item": [
										{
											"name": "String ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Response content type is application/json\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields - code and message\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.code).to.exist;",
															"  pm.expect(responseData.message).to.exist;",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"// Define the order payload",
															"let orderPayload = {",
															"    \"customer_name\": \"John Doe\",",
															"    \"items\": [",
															"        {",
															"            \"menu_item_id\": 1,",
															"            \"quantity\": 2",
															"        }",
															"    ],",
															"    \"total_price\": 7.00",
															"};",
															"",
															"// Make a request to create an order",
															"pm.sendRequest({",
															"    url: pm.collectionVariables.get(\"baseUrl\") + \"/orders\",",
															"    method: \"POST\",",
															"    header: {",
															"        \"Content-Type\": \"application/json\",",
															"        \"Accept\": \"application/json\",",
															"        \"Authorization\": \"Basic \" + require('btoa')(pm.collectionVariables.get(\"basicAuthUsername\") + \":\" + pm.collectionVariables.get(\"basicAuthPassword\")) // Use Basic Auth",
															"    },",
															"    body: {",
															"        mode: \"raw\",",
															"        raw: JSON.stringify(orderPayload)",
															"    }",
															"}, function (err, response) {",
															"    console.log(' error ', err, ' response', response)",
															"    if (err) {",
															"        console.log(\"Error creating order:\", err);",
															"    } else {",
															"        let jsonData = response.json();",
															"        if (response.code === 201 && jsonData) {",
															"            console.log(\"Order created successfully with ID:\", jsonData);",
															"            pm.environment.set(\"orderId\", jsonData);",
															"        } else {",
															"            console.log(\"Failed to create order. Response:\", response);",
															"        }",
															"    }",
															"});",
															"console.log(\"Using orderId:\", pm.environment.get(\"orderId\"));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"customer_name\": \"jon\",\n  \"items\": [\n    {\n      \"menu_item_id\": 1,\n      \"quantity\": 1\n    }\n  ],\n  \"total_price\": 0\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": ""
														}
													]
												},
												"description": "Updates an order's details using the provided orderId."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update Order",
							"item": [
								{
									"name": "200",
									"item": [
										{
											"name": "Update an order by its ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Response content type is application/json\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});",
															"",
															"pm.test(\"All fields is present in the response\", function () {",
															"    const order = pm.response.json();",
															"    ",
															"    pm.expect(order).to.have.property('id');",
															"    pm.expect(order).to.have.property('customer_name');",
															"    pm.expect(order).to.have.property('items');",
															"    pm.expect(order).to.have.property('total_price');",
															"});",
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"// Define the order payload",
															"let orderPayload = {",
															"    \"customer_name\": \"John Doe\",",
															"    \"items\": [",
															"        {",
															"            \"menu_item_id\": 1,",
															"            \"quantity\": 2",
															"        }",
															"    ],",
															"    \"total_price\": 7.00",
															"};",
															"",
															"// Make a request to create an order",
															"pm.sendRequest({",
															"    url: pm.collectionVariables.get(\"baseUrl\") + \"/orders\",",
															"    method: \"POST\",",
															"    header: {",
															"        \"Content-Type\": \"application/json\",",
															"        \"Accept\": \"application/json\",",
															"        \"Authorization\": \"Basic \" + require('btoa')(pm.collectionVariables.get(\"basicAuthUsername\") + \":\" + pm.collectionVariables.get(\"basicAuthPassword\")) // Use Basic Auth",
															"    },",
															"    body: {",
															"        mode: \"raw\",",
															"        raw: JSON.stringify(orderPayload)",
															"    }",
															"}, function (err, response) {",
															"    console.log(' error ', err, ' response', response)",
															"    if (err) {",
															"        console.log(\"Error creating order:\", err);",
															"    } else {",
															"        let jsonData = response.json();",
															"        if (response.code === 201 && jsonData) {",
															"            console.log(\"Order created successfully with ID:\", jsonData);",
															"            pm.environment.set(\"orderId\", jsonData);",
															"        } else {",
															"            console.log(\"Failed to create order. Response:\", response);",
															"        }",
															"    }",
															"});",
															"console.log(\"Using orderId:\", pm.environment.get(\"orderId\"));",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"customer_name\": \"jon\",\n  \"items\": [\n    {\n      \"menu_item_id\": 1,\n      \"quantity\": 1\n    }\n  ],\n  \"total_price\": 0\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "{{orderId}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Updates an order's details using the provided orderId."
											},
											"response": []
										}
									]
								},
								{
									"name": "401",
									"item": [
										{
											"name": "Missing credentials",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Extract response data",
															"let responseCode = pm.response.code;",
															"",
															"// Test 1: Verify response status is 200",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields - code and message\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.code).to.exist;",
															"  pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Message is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.code).to.exist;",
															"    pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Content-Type is application/json\", function () {",
															"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"customer_name\": \"jon\",\n  \"items\": [\n    {\n      \"menu_item_id\": 1,\n      \"quantity\": 1\n    }\n  ],\n  \"total_price\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "{{orderId}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Removes an order from the coffee shop system using the provided orderId."
											},
											"response": []
										},
										{
											"name": "Incorrect credentials",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Extract response data",
															"let responseCode = pm.response.code;",
															"",
															"// Test 1: Verify response status is 200",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields - code and message\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.code).to.exist;",
															"  pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Message is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.code).to.exist;",
															"    pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Content-Type is application/json\", function () {",
															"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "nope",
															"type": "string"
														},
														{
															"key": "username",
															"value": "nope",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"customer_name\": \"jon\",\n  \"items\": [\n    {\n      \"menu_item_id\": 1,\n      \"quantity\": 1\n    }\n  ],\n  \"total_price\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "{{orderId}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Removes an order from the coffee shop system using the provided orderId."
											},
											"response": []
										}
									]
								},
								{
									"name": "400",
									"item": [
										{
											"name": "String ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 400\", function () {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Response content type is application/json\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields - code and message\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.code).to.exist;",
															"  pm.expect(responseData.message).to.exist;",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"// Define the order payload",
															"let orderPayload = {",
															"    \"customer_name\": \"John Doe\",",
															"    \"items\": [",
															"        {",
															"            \"menu_item_id\": 1,",
															"            \"quantity\": 2",
															"        }",
															"    ],",
															"    \"total_price\": 7.00",
															"};",
															"",
															"// Make a request to create an order",
															"pm.sendRequest({",
															"    url: pm.collectionVariables.get(\"baseUrl\") + \"/orders\",",
															"    method: \"POST\",",
															"    header: {",
															"        \"Content-Type\": \"application/json\",",
															"        \"Accept\": \"application/json\",",
															"        \"Authorization\": \"Basic \" + require('btoa')(pm.collectionVariables.get(\"basicAuthUsername\") + \":\" + pm.collectionVariables.get(\"basicAuthPassword\")) // Use Basic Auth",
															"    },",
															"    body: {",
															"        mode: \"raw\",",
															"        raw: JSON.stringify(orderPayload)",
															"    }",
															"}, function (err, response) {",
															"    console.log(' error ', err, ' response', response)",
															"    if (err) {",
															"        console.log(\"Error creating order:\", err);",
															"    } else {",
															"        let jsonData = response.json();",
															"        if (response.code === 201 && jsonData) {",
															"            console.log(\"Order created successfully with ID:\", jsonData);",
															"            pm.environment.set(\"orderId\", jsonData);",
															"        } else {",
															"            console.log(\"Failed to create order. Response:\", response);",
															"        }",
															"    }",
															"});",
															"console.log(\"Using orderId:\", pm.environment.get(\"orderId\"));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"customer_name\": \"jon\",\n  \"items\": [\n    {\n      \"menu_item_id\": 1,\n      \"quantity\": 1\n    }\n  ],\n  \"total_price\": 0\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": ""
														}
													]
												},
												"description": "Updates an order's details using the provided orderId."
											},
											"response": []
										}
									]
								},
								{
									"name": "404",
									"item": [
										{
											"name": "Order not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 404\", function () {",
															"  pm.expect(pm.response.code).to.equal(404);",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields - code and message\", function () {",
															"  const responseData = pm.response.json();",
															"  ",
															"  pm.expect(responseData).to.be.an('object');",
															"  pm.expect(responseData.code).to.exist;",
															"  pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Message is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
															"    const responseData = pm.response.json();",
															"    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.code).to.exist;",
															"    pm.expect(responseData.message).to.exist;",
															"});",
															"",
															"",
															"pm.test(\"Content-Type is application/json\", function () {",
															"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId",
															"value": "27029",
															"description": "(Required) "
														}
													]
												},
												"description": "Removes an order from the coffee shop system using the provided orderId."
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Get All Orders",
					"item": [
						{
							"name": "200",
							"item": [
								{
									"name": "Retrieve an empty list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response has the required fields - id, customer_name, items, total_price\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    pm.expect(responseData).to.have.lengthOf(0)",
													"});",
													"",
													"",
													"pm.test(\"Items array is present and contains expected number of elements\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"",
													"    responseData.forEach(function(order) {",
													"        pm.expect(order.items).to.exist;",
													"        pm.expect(order.items).to.be.an('array');",
													"        order.items.forEach(function(item) {",
													"            pm.expect(item.menu_item_id).to.exist.and.to.be.a('number');",
													"            pm.expect(item.quantity).to.exist.and.to.be.a('number');",
													"        });",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Menu item ID and quantity in items array are non-negative integers\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    responseData.forEach(function(order) {",
													"        pm.expect(order.items).to.be.an('array');",
													"        order.items.forEach(function(item) {",
													"            pm.expect(item.menu_item_id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Menu item ID must be a non-negative integer\");",
													"            pm.expect(item.quantity).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Quantity must be a non-negative integer\");",
													"        });",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Total price is a non-negative number\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  responseData.forEach(function(order) {",
													"    pm.expect(order.total_price).to.be.a('number').and.to.be.at.least(0);",
													"  });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										},
										"description": "Returns an array of all orders placed in the coffee shop."
									},
									"response": []
								},
								{
									"name": "Retrieve a list of all orders Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response has the required fields - id, customer_name, items, total_price\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    pm.expect(responseData).to.have.lengthOf(1)",
													"    responseData.forEach(function(order) {",
													"        pm.expect(order).to.have.property('id');",
													"        pm.expect(order).to.have.property('customer_name');",
													"        pm.expect(order).to.have.property('items');",
													"        pm.expect(order).to.have.property('total_price');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Items array is present and contains expected number of elements\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    responseData.forEach(function(order) {",
													"        pm.expect(order.items).to.exist;",
													"        pm.expect(order.items).to.be.an('array');",
													"        order.items.forEach(function(item) {",
													"            pm.expect(item.menu_item_id).to.exist.and.to.be.a('number');",
													"            pm.expect(item.quantity).to.exist.and.to.be.a('number');",
													"        });",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Menu item ID and quantity in items array are non-negative integers\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('array');",
													"    responseData.forEach(function(order) {",
													"        pm.expect(order.items).to.be.an('array');",
													"        order.items.forEach(function(item) {",
													"            pm.expect(item.menu_item_id).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Menu item ID must be a non-negative integer\");",
													"            pm.expect(item.quantity).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Quantity must be a non-negative integer\");",
													"        });",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Total price is a non-negative number\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  responseData.forEach(function(order) {",
													"    pm.expect(order.total_price).to.be.a('number').and.to.be.at.least(0);",
													"  });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"// Define the order payload",
													"let orderPayload = {",
													"    \"customer_name\": \"John Doe\",",
													"    \"items\": [",
													"        {",
													"            \"menu_item_id\": 1,",
													"            \"quantity\": 2",
													"        }",
													"    ],",
													"    \"total_price\": 7.00",
													"};",
													"",
													"// Make a request to create an order",
													"pm.sendRequest({",
													"    url: pm.collectionVariables.get(\"baseUrl\") + \"/orders\",",
													"    method: \"POST\",",
													"    header: {",
													"        \"Content-Type\": \"application/json\",",
													"        \"Accept\": \"application/json\",",
													"        \"Authorization\": \"Basic \" + require('btoa')(pm.collectionVariables.get(\"basicAuthUsername\") + \":\" + pm.collectionVariables.get(\"basicAuthPassword\")) // Use Basic Auth",
													"    },",
													"    body: {",
													"        mode: \"raw\",",
													"        raw: JSON.stringify(orderPayload)",
													"    }",
													"}, function (err, response) {",
													"    if (err) {",
													"        console.log(\"Error creating order:\", err);",
													"    } else {",
													"        let jsonData = response.json();",
													"        if (response.code === 201 && jsonData) {",
													"            console.log(\"Order created successfully with ID:\", jsonData);",
													"            pm.environment.set(\"orderId\", jsonData);",
													"            console.log(\"Using orderId:\", pm.environment.get(\"orderId\"));",
													"",
													"        } else {",
													"            console.log(\"Failed to create order. Response:\", response);",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										},
										"description": "Returns an array of all orders placed in the coffee shop."
									},
									"response": []
								}
							]
						},
						{
							"name": "401",
							"item": [
								{
									"name": "Missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Extract response data",
													"let responseCode = pm.response.code;",
													"",
													"// Test 1: Verify response status is 200",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - code and message\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.code).to.exist;",
													"  pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.code).to.exist;",
													"    pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										},
										"description": "Removes an order from the coffee shop system using the provided orderId."
									},
									"response": []
								},
								{
									"name": "Incorrect credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Extract response data",
													"let responseCode = pm.response.code;",
													"",
													"// Test 1: Verify response status is 200",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - code and message\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.code).to.exist;",
													"  pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.code).to.exist;",
													"    pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "nope",
													"type": "string"
												},
												{
													"key": "username",
													"value": "nope",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										},
										"description": "Removes an order from the coffee shop system using the provided orderId."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Create Order",
					"item": [
						{
							"name": "201",
							"item": [
								{
									"name": "Create a new order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"// Parse response JSON",
													"let responseJson = pm.response.json();",
													"",
													"// Test 2: Ensure response contains a valid order ID",
													"pm.test(\"Response contains a valid order ID\", function () {",
													"    pm.expect(responseJson).to.be.a(\"number\"); // Order ID should be a number",
													"    pm.expect(responseJson).to.be.above(0);   // Order ID should be greater than 0",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": 2,\n  \"customer_name\": \"harry\",\n  \"items\": [\n    {\n      \"menu_item_id\": 1,\n      \"quantity\": 1\n    }\n  ],\n  \"total_price\": 2.3\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										},
										"description": "Allows customers to create a new order in the coffee shop."
									},
									"response": []
								}
							]
						},
						{
							"name": "400",
							"item": [
								{
									"name": "Missing customer name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1: Verify response status is 400",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Parse response JSON",
													"let responseJson = pm.response.json();",
													"",
													"// Test 2: Ensure response contains an error object",
													"pm.test(\"Response contains an error object\", function () {",
													"    pm.expect(responseJson).to.be.an(\"object\");",
													"    pm.expect(responseJson).to.have.property(\"code\");",
													"    pm.expect(responseJson).to.have.property(\"message\");",
													"    pm.expect(responseJson).to.have.property(\"errors\");",
													"});",
													"",
													"// Test 3: Validate error code is 400",
													"pm.test(\"Error code is 400\", function () {",
													"    pm.expect(responseJson.code).to.equal(400);",
													"});",
													"",
													"// Test 4: Ensure error message is a non-empty string",
													"pm.test(\"Error message is meaningful\", function () {",
													"    pm.expect(responseJson.message).to.be.a(\"string\");",
													"    pm.expect(responseJson.message.length).to.be.above(0);",
													"});",
													"",
													"// Test 5: Ensure `errors` field is an array and contains at least one error message",
													"pm.test(\"Errors array is present and not empty\", function () {",
													"    pm.expect(responseJson.errors).to.be.an(\"array\");",
													"    pm.expect(responseJson.errors.length).to.be.above(0);",
													"",
													"});",
													"",
													"// Test 6: Validate each error message in `errors` array is a string and meaningful",
													"pm.test(\"Each error message in errors array is valid\", function () {",
													"    responseJson.errors.forEach(error => {",
													"        pm.expect(error).to.be.a(\"string\");",
													"        pm.expect(error.length).to.be.above(0);",
													"    });",
													"});",
													"",
													"// Log response data for debugging",
													"console.log(\"Error Response:\", responseJson);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"items\": [\n    {\n      \"menu_item_id\": 1,\n      \"quantity\": 1\n    }\n  ],\n  \"total_price\": 1\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										},
										"description": "Allows customers to create a new order in the coffee shop."
									},
									"response": []
								}
							]
						},
						{
							"name": "401",
							"item": [
								{
									"name": "Missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Extract response data",
													"let responseCode = pm.response.code;",
													"",
													"// Test 1: Verify response status is 200",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - code and message\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.code).to.exist;",
													"  pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.code).to.exist;",
													"    pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										},
										"description": "Removes an order from the coffee shop system using the provided orderId."
									},
									"response": []
								},
								{
									"name": "Incorrect credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Extract response data",
													"let responseCode = pm.response.code;",
													"",
													"// Test 1: Verify response status is 200",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - code and message\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.code).to.exist;",
													"  pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that the orderId is not removed from the system\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.code).to.exist;",
													"    pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "nope",
													"type": "string"
												},
												{
													"key": "username",
													"value": "nope",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										},
										"description": "Removes an order from the coffee shop system using the provided orderId."
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const url = pm.collectionVariables.get(\"baseUrl\") + '/orders'",
							"pm.environment.unset('orderId')",
							"pm.sendRequest({",
							"    url,",
							"    method: 'GET',",
							"    header: {",
							"        \"Content-Type\": \"application/json\",",
							"        \"Accept\": \"application/json\",",
							"        \"Authorization\": \"Basic \" + require('btoa')(",
							"            pm.collectionVariables.get(\"basicAuthUsername\") + \":\" + pm.collectionVariables.get(\"basicAuthPassword\")",
							"        ) // Use Basic Auth",
							"    },",
							"}, function (err, res) {",
							"    // Ensure response is not empty and contains JSON",
							"    if (!err && res.code === 200) {",
							"        let orders;",
							"        try {",
							"            orders = res.json(); // Convert response to JSON",
							"            for(const i of orders) {",
							"                pm.sendRequest({",
							"                    url: url + `/${i.id}`,",
							"                    method: 'DELETE',",
							"                    header: {",
							"                        \"Content-Type\": \"application/json\",",
							"                        \"Accept\": \"application/json\",",
							"                        \"Authorization\": \"Basic \" + require('btoa')(",
							"                            pm.collectionVariables.get(\"basicAuthUsername\") + \":\" + pm.collectionVariables.get(\"basicAuthPassword\")",
							"                        ) // Use Basic Auth",
							"                    },",
							"                }, function (err, res) {",
							"                    // Ensure response is not empty and contains JSON",
							"                    if (!err && res.code === 204) {",
							"                        console.log('ok ', i.id , ' has been deleted')",
							"                    ",
							"                    } else {",
							"                        console.error(\"Unexpected error or non-200 response:\", res);",
							"                    }",
							"",
							"                    // Expect no error",
							"                    pm.expect(err).to.be.null;",
							"                });",
							"",
							"            }",
							"        } catch (error) {",
							"            console.error(\"Error parsing JSON response:\", error);",
							"        }",
							"        ",
							"        // Ensure response is an array (if expected)",
							"        pm.test(\"Response is an array\", function () {",
							"            pm.expect(orders).to.be.an(\"array\");",
							"        });",
							"    } else {",
							"        console.error(\"Unexpected error or non-200 response:\", res);",
							"    }",
							"});",
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "{{basicAuthUsername}}",
				"type": "string"
			},
			{
				"key": "password",
				"value": "{{basicAuthPassword}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reptile-electric-perfectly.ngrok-free.app/v1"
		},
		{
			"key": "basicAuthUsername",
			"value": "admin",
			"type": "default"
		},
		{
			"key": "basicAuthPassword",
			"value": "password",
			"type": "default"
		}
	]
}